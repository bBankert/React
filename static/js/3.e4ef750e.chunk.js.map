{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["checkoutSummary","props","className","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zip","pattern","minLength","maxLength","country","email","deliveryMethod","options","displayValue","loading","formIsValid","orderHandler","event","preventDefault","setState","formData","formElement","order","ingred","price","orderData","UID","onOrderBurger","token","inputChangedHandler","identifier","updatedElement","updateObject","target","checkValidity","updatedForm","inputIdentifier","key","this","push","id","config","form","Spinner","onSubmit","map","Input","invalid","shouldValidate","changed","disabled","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchaseRedirect","purchased","path","match","component","cancelOrder","input","inputElement","inputClasses","join","onChange","option","label"],"mappings":"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","file":"static/js/3.e4ef750e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return(\r\n        <div className=\"CheckoutSummary\">\r\n            <h1>Thank you, Come again!</h1>\r\n            <div style={{width: '100%',margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n            btnType=\"Danger\"\r\n            clicked={props.checkoutCancelled}>Cancel</Button>\r\n            <Button \r\n            btnType=\"Success\"\r\n            clicked={props.checkoutContinued}>Continue</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React,{ Component } from \"react\";\r\nimport axios from '../../../axios-orders';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport {updateObject,checkValidity} from '../../../Shared/utility';\r\n\r\nclass ContactData extends Component{\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {     \r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zip: {    \r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip Code',\r\n                    pattern: '[0-9]{5}'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'someone@example.com'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'overnight',displayValue: 'Overnight'},\r\n                        {value: 'standard',displayValue: 'Standard'}\r\n                    ]\r\n                },\r\n                value: 'overnight',\r\n                valid: true,\r\n                validation: {}\r\n            }\r\n        },\r\n        loading: false,\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        this.setState({loading: true});\r\n        const formData = {};\r\n        for(let formElement in this.state.orderForm){\r\n            formData[formElement] = this.state.orderForm[formElement].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ingred,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            UID: this.props.UID\r\n        };\r\n\r\n        this.props.onOrderBurger(order,this.props.token);\r\n        \r\n    }\r\n\r\n\r\n    inputChangedHandler = (event,identifier) => {\r\n        const updatedElement = updateObject(this.state.orderForm[identifier],{\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value,this.state.orderForm[identifier].validation),\r\n            touched: true\r\n        })\r\n        const updatedForm = updateObject(this.state.orderForm,{\r\n            [identifier]: updatedElement\r\n        });\r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedForm){\r\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedForm,formIsValid: formIsValid});\r\n    }\r\n\r\n\r\n    render(){\r\n        const formElement = [];\r\n        for(let key in this.state.orderForm){\r\n            formElement.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = null;\r\n        if(this.props.loading){\r\n            form = <Spinner />;\r\n        }\r\n        else{\r\n            form = (\r\n                <form onSubmit={this.orderHandler}>\r\n                    {formElement.map(formElement => (\r\n                        <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType} \r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event,formElement.id)}/>\r\n                    ))}\r\n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid}>Submit</Button>\r\n                </form>\r\n            );\r\n        }\r\n        return(\r\n            <div className=\"ContactData\">\r\n                <h4>Enter your contact info</h4>\r\n                    {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingred: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        UID: state.auth.UID\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (order,token) => dispatch(actions.purchaseBurger(order,token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport {Route,Redirect} from 'react-router-dom';\r\nimport ContactData from '../../containers/Checkout/ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Checkout extends Component{\r\n\r\n\r\n    checkoutCancelledHandler = () =>{\r\n        //this.props.cancelOrder();\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        let summary = <Redirect to=\"/\"/>;\r\n        \r\n        if(this.props.ingred){\r\n            const purchaseRedirect = this.props.purchased ?  <Redirect to=\"/\"/> : null;\r\n            summary = (\r\n            <div>\r\n                {purchaseRedirect}\r\n                <CheckoutSummary \r\n                ingredients={this.props.ingred}\r\n                checkoutCancelled={this.checkoutCancelledHandler}\r\n                checkoutContinued={this.checkoutContinuedHandler}/>\r\n                <Route \r\n                    path={this.props.match.path + '/contact-data'} \r\n                    component={ContactData}/>\r\n            </div>\r\n            )\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingred: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        cancelOrder: () => dispatch(actions.setAuthRedirectPath('/')),\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Checkout);","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [\"InputElement\"];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(\"Invalid\")\r\n    }\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')}\r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n            <select className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Input\">\r\n            <label>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )};\r\n\r\n\r\nexport default input;"],"sourceRoot":""}