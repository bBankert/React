{"version":3,"sources":["containers/Auth/Auth.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError.js","components/UI/Input/Input.js"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","previousState","this","buildingBurger","authRedirect","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","Input","invalid","shouldValidate","changed","loading","Spinner","errorMessage","error","name","Error","message","redirect","isAuthenticated","to","className","onSubmit","Button","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","authRedirectPath","dispatch","actions","input","inputElement","inputClasses","join","onChange","options","option","displayValue","label"],"mappings":"uQAUMA,E,4MACFC,MAAQ,CACJC,SAAS,CACLC,MAAO,CACHC,YAAa,QACbC,cAAe,CACXC,KAAM,QACNC,YAAa,iBAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPC,SAAS,GAEbC,SAAU,CACNT,YAAa,QACbC,cAAe,CACXC,KAAM,WACNC,YAAa,YAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVI,UAAW,GAEfH,OAAO,EACPC,SAAS,IAGjBG,UAAU,G,EAUdC,oBAAsB,SAACC,EAAMC,GACzB,IAAMC,EAAkBC,YAAa,EAAKnB,MAAMC,SAAZ,eAC/BgB,EAAcE,YAAa,EAAKnB,MAAMC,SAASgB,GAAa,CACzDV,MAAOS,EAAMI,OAAOb,MACpBG,MAAOW,YAAcL,EAAMI,OAAOb,MAAM,EAAKP,MAAMC,SAASgB,GAAaT,YACzEG,SAAS,MAGjB,EAAKW,SAAS,CAACrB,SAAUiB,K,EAG7BK,cAAgB,SAACP,GACbA,EAAMQ,iBACN,EAAKC,MAAMC,OAAO,EAAK1B,MAAMC,SAASC,MAAMK,MAAM,EAAKP,MAAMC,SAASW,SAASL,MAAM,EAAKP,MAAMc,W,EAGpGa,sBAAwB,WACpB,EAAKL,UAAS,SAAAM,GACV,MAAO,CAACd,UAAWc,EAAcd,c,kEAxBjCe,KAAKJ,MAAMK,gBAA8C,MAA5BD,KAAKJ,MAAMM,cACxCF,KAAKJ,MAAMO,0B,+BA2BR,IAAD,OACAC,EAAoB,GAC1B,IAAI,IAAIC,KAAOL,KAAK7B,MAAMC,SACtBgC,EAAkBE,KAAK,CACnBC,GAAIF,EACJG,OAAQR,KAAK7B,MAAMC,SAASiC,KAIpC,IAAII,EAAOL,EAAkBM,KAAI,SAAAC,GAAW,OACxC,kBAACC,EAAA,EAAD,CACAP,IAAKM,EAAYJ,GACjBjC,YAAaqC,EAAYH,OAAOlC,YAChCC,cAAeoC,EAAYH,OAAOjC,cAClCG,MAAOiC,EAAYH,OAAO9B,MAC1BmC,SAAUF,EAAYH,OAAO3B,MAC7BiC,eAAgBH,EAAYH,OAAO7B,WACnCG,QAAS6B,EAAYH,OAAO1B,QAC5BiC,QAAS,SAAC5B,GAAD,OAAW,EAAKD,oBAAoBC,EAAMwB,EAAYJ,UAGhEP,KAAKJ,MAAMoB,UACVP,EAAO,kBAACQ,EAAA,EAAD,OAGX,IAAMC,EAAe,KAClBlB,KAAKJ,MAAMuB,QCnGP,SAAwBC,GACrC,MAAM,IAAIC,MAAM,IAAOD,EAAO,kBDmGR,iBAAZF,EAAgB,2BAAIlB,KAAKJ,MAAMuB,MAAMG,UAGzC,IAAIC,EAAW,KAKf,OAJGvB,KAAKJ,MAAM4B,kBACVD,EAAW,kBAAC,IAAD,CAAUE,GAAIzB,KAAKJ,MAAMM,gBAIpC,yBAAKwB,UAAU,QACVR,EACAK,EACD,0BAAMI,SAAU3B,KAAKN,eAChBe,EACD,kBAACmB,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WAEJ,kBAACD,EAAA,EAAD,CAAQE,QAAS9B,KAAKF,sBAAuB+B,QAAQ,UAArD,aAAyE7B,KAAK7B,MAAMc,SAAW,UAAY,gB,GA1GxG8C,aAiIJC,uBAjBS,SAAA7D,GACpB,MAAO,CACH6C,QAAS7C,EAAM8D,KAAKjB,QACpBG,MAAOhD,EAAM8D,KAAKd,MAClBK,gBAAsC,OAArBrD,EAAM8D,KAAKC,MAC5BjC,eAAgB9B,EAAMgE,cAAcC,SACpClC,aAAc/B,EAAM8D,KAAKI,qBAIN,SAAAC,GACvB,MAAO,CACHzC,OAAQ,SAACxB,EAAMU,EAASE,GAAhB,OAA6BqD,EAASC,IAAalE,EAAMU,EAASE,KAC1EkB,sBAAuB,kBAAMmC,EAASC,IAA4B,UAI3DP,CAA4C9D,I,gCE3I3D,0BAqDesE,IAlDD,SAAC5C,GAEX,IAAI6C,EAAe,KACbC,EAAe,CAAC,gBAItB,OAHG9C,EAAMiB,SAAWjB,EAAMkB,gBAAkBlB,EAAMd,SAC9C4D,EAAapC,KAAK,WAEfV,EAAMtB,aACT,IAAK,QACDmE,EAAe,yCAAOf,UAAWgB,EAAaC,KAAK,MAC/C/C,EAAMrB,cADK,CAEfG,MAAOkB,EAAMlB,MACbkE,SAAUhD,EAAMmB,WAChB,MACJ,IAAM,WACF0B,EAAe,4CAAUf,UAAWgB,EAAaC,KAAK,MAClD/C,EAAMrB,cADK,CAEfG,MAAOkB,EAAMlB,MACbkE,SAAUhD,EAAMmB,WAChB,MACJ,IAAK,SACD0B,EACA,0CAAQf,UAAWgB,EAAaC,KAAK,MACjC/C,EAAMrB,cADV,CAEAG,MAAOkB,EAAMlB,MACbkE,SAAUhD,EAAMmB,UACXnB,EAAMrB,cAAcsE,QAAQnC,KAAI,SAAAoC,GAAM,OACnC,4BAAQzC,IAAKyC,EAAOpE,MAAOA,MAAOoE,EAAOpE,OAAQoE,EAAOC,kBAGhE,MACJ,QACIN,EAAe,yCACff,UAAWgB,EAAaC,KAAK,MACzB/C,EAAMrB,cAFK,CAGfG,MAAOkB,EAAMlB,MACbkE,SAAUhD,EAAMmB,WAMxB,OACI,yBAAKW,UAAU,SACX,+BAAQ9B,EAAMoD,OACbP,K","file":"static/js/4.21695c24.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {updateObject,checkValidity} from '../../Shared/utility';\r\n\r\nclass Auth extends Component{\r\n    state = {\r\n        controls:{\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirect !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n\r\n    inputChangedHandler = (event,controlName) => {\r\n        const updatedControls = updateObject(this.state.controls,{\r\n            [controlName]: updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched: true,\r\n            })\r\n        });\r\n        this.setState({controls: updatedControls});\r\n    };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(previousState => {\r\n            return {isSignUp: !previousState.isSignUp}\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType} \r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event,formElement.id)}/>\r\n        ));\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner/>;\r\n        }\r\n\r\n        const errorMessage = null;\r\n        if(this.props.error){\r\n            errorMessage = (<p>{this.props.error.message}</p>);\r\n        }\r\n\r\n        let redirect = null;\r\n        if(this.props.isAuthenticated){\r\n            redirect = <Redirect to={this.props.authRedirect}/>\r\n        }\r\n\r\n        return(\r\n            <div className=\"Auth\">\r\n                {errorMessage}\r\n                {redirect}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">Submit</Button>\r\n                </form>\r\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">Switch to {this.state.isSignUp ? 'Sign in' : 'Sign up'}</Button>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirect: state.auth.authRedirectPath,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email,password,isSignUp) => dispatch(actions.auth(email,password,isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","export default function _readOnlyError(name) {\n  throw new Error(\"\\\"\" + name + \"\\\" is read-only\");\n}","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [\"InputElement\"];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(\"Invalid\")\r\n    }\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')}\r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n            <select className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Input\">\r\n            <label>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )};\r\n\r\n\r\nexport default input;"],"sourceRoot":""}