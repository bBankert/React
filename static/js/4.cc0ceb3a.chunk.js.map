{"version":3,"sources":["containers/Auth/Auth.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError.js","components/UI/Input/Input.js"],"names":["connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirect","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","props","useState","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","minLength","controls","setControls","setIsSignUp","useEffect","formElementsArray","key","push","id","config","form","map","formElement","Input","invalid","shouldValidate","changed","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","Spinner","errorMessage","name","Error","message","redirect","to","className","onSubmit","preventDefault","Button","btnType","clicked","input","inputElement","inputClasses","join","onChange","options","option","displayValue","label"],"mappings":"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","file":"static/js/4.cc0ceb3a.chunk.js","sourcesContent":["import React, {useState,useEffect} from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {updateObject,checkValidity} from '../../Shared/utility';\r\n\r\nconst Auth = props => {\r\n    const [controls,setControls] = useState({\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        });\r\n        const [isSignUp,setIsSignUp] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if(!props.buildingBurger && props.authRedirect !== '/'){\r\n            props.onSetAuthRedirectPath();\r\n        }\r\n    },[]);\r\n\r\n\r\n    const inputChangedHandler = (event,controlName) => {\r\n        const updatedControls = updateObject(controls,{\r\n            [controlName]: updateObject(controls[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value,controls[controlName].validation),\r\n                touched: true,\r\n            })\r\n        });\r\n        setControls(updatedControls);\r\n    };\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        props.onAuth(controls.email.value,controls.password.value,isSignUp);\r\n    }\r\n\r\n    const switchAuthModeHandler = () => {\r\n        setIsSignUp(!isSignUp);\r\n    }\r\n\r\n    const formElementsArray = [];\r\n    for(let key in controls){\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: controls[key]\r\n        });\r\n    }\r\n\r\n    let form = formElementsArray.map(formElement => (\r\n        <Input \r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType} \r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => inputChangedHandler(event,formElement.id)}/>\r\n    ));\r\n\r\n    if(props.loading){\r\n        form = <Spinner/>;\r\n    }\r\n\r\n    const errorMessage = null;\r\n    if(props.error){\r\n        errorMessage = (<p>{props.error.message}</p>);\r\n    }\r\n\r\n    let redirect = null;\r\n    if(props.isAuthenticated){\r\n        redirect = <Redirect to={props.authRedirect}/>\r\n    }\r\n\r\n    return(\r\n        <div className=\"Auth\">\r\n            {errorMessage}\r\n            {redirect}\r\n            <form onSubmit={submitHandler}>\r\n                {form}\r\n                <Button btnType=\"Success\">Submit</Button>\r\n            </form>\r\n            <Button clicked={switchAuthModeHandler} btnType=\"Danger\">Switch to {isSignUp ? 'Sign in' : 'Sign up'}</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirect: state.auth.authRedirectPath,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email,password,isSignUp) => dispatch(actions.auth(email,password,isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","export default function _readOnlyError(name) {\n  throw new Error(\"\\\"\" + name + \"\\\" is read-only\");\n}","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [\"InputElement\"];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(\"Invalid\")\r\n    }\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')}\r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n            <select className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Input\">\r\n            <label>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )};\r\n\r\n\r\nexport default input;"],"sourceRoot":""}