{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["checkoutSummary","props","className","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ingred","burgerBuilder","price","totalPrice","loading","order","token","auth","UID","dispatch","onOrderBurger","actions","withErrorHandler","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zip","pattern","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderForm","setOrderFrom","formIsValid","setFormIsValid","formElement","key","push","id","config","form","Spinner","onSubmit","event","preventDefault","formData","orderData","map","Input","invalid","shouldValidate","changed","identifier","updatedElement","updateObject","target","checkValidity","updatedForm","inputIdentifier","inputChangedHandler","disabled","axios","purchased","cancelOrder","summary","to","purchaseRedirect","history","goBack","replace","path","match","component","ContactData","input","inputElement","inputClasses","join","onChange","option","label"],"mappings":"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","file":"static/js/3.fc674fd9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return(\r\n        <div className=\"CheckoutSummary\">\r\n            <h1>Thank you, Come again!</h1>\r\n            <div style={{width: '100%',margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n            btnType=\"Danger\"\r\n            clicked={props.checkoutCancelled}>Cancel</Button>\r\n            <Button \r\n            btnType=\"Success\"\r\n            clicked={props.checkoutContinued}>Continue</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React,{ useState } from \"react\";\r\nimport axios from '../../../axios-orders';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport {updateObject,checkValidity} from '../../../Shared/utility';\r\n\r\nconst ContactData = props =>{\r\n    const [orderForm,setOrderFrom] = useState({\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {     \r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zip: {    \r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip Code',\r\n                    pattern: '[0-9]{5}'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'someone@example.com'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'overnight',displayValue: 'Overnight'},\r\n                        {value: 'standard',displayValue: 'Standard'}\r\n                    ]\r\n                },\r\n                value: 'overnight',\r\n                valid: true,\r\n                validation: {}\r\n            }\r\n        });\r\n        const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n    const orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for(let formElement in orderForm){\r\n            formData[formElement] = orderForm[formElement].value;\r\n        }\r\n        const order = {\r\n            ingredients: props.ingred,\r\n            price: props.price,\r\n            orderData: formData,\r\n            UID: props.UID\r\n        };\r\n\r\n        props.onOrderBurger(order,props.token);\r\n        \r\n    }\r\n\r\n\r\n    const inputChangedHandler = (event,identifier) => {\r\n        const updatedElement = updateObject(orderForm[identifier],{\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value,orderForm[identifier].validation),\r\n            touched: true\r\n        })\r\n        const updatedForm = updateObject(orderForm,{\r\n            [identifier]: updatedElement\r\n        });\r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedForm){\r\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        setOrderFrom(updatedForm);\r\n        setFormIsValid(formIsValid);\r\n    }\r\n\r\n\r\n    const formElement = [];\r\n    for(let key in orderForm){\r\n        formElement.push({\r\n            id: key,\r\n            config: orderForm[key]\r\n        });\r\n    }\r\n    let form = null;\r\n    if(props.loading){\r\n        form = <Spinner />;\r\n    }\r\n    else{\r\n        form = (\r\n            <form onSubmit={orderHandler}>\r\n                {formElement.map(formElement => (\r\n                    <Input \r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType} \r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event) => inputChangedHandler(event,formElement.id)}/>\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!formIsValid}>Submit</Button>\r\n            </form>\r\n        );\r\n    }\r\n    return(\r\n        <div className=\"ContactData\">\r\n            <h4>Enter your contact info</h4>\r\n                {form}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingred: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        UID: state.auth.UID\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (order,token) => dispatch(actions.purchaseBurger(order,token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport {Route,Redirect} from 'react-router-dom';\r\nimport ContactData from '../../containers/Checkout/ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst Checkout = props => {\r\n\r\n\r\n    const checkoutCancelledHandler = () =>{\r\n        props.history.goBack();\r\n    }\r\n\r\n    const checkoutContinuedHandler = () => {\r\n        props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n\r\n\r\n    let summary = <Redirect to=\"/\"/>;\r\n    \r\n    if(props.ingred){\r\n        const purchaseRedirect = props.purchased ?  <Redirect to=\"/\"/> : null;\r\n        summary = (\r\n        <div>\r\n            {purchaseRedirect}\r\n            <CheckoutSummary \r\n            ingredients={props.ingred}\r\n            checkoutCancelled={checkoutCancelledHandler}\r\n            checkoutContinued={checkoutContinuedHandler}/>\r\n            <Route \r\n                path={props.match.path + '/contact-data'} \r\n                component={ContactData}/>\r\n        </div>\r\n        )\r\n    }\r\n    return summary;\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingred: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        cancelOrder: () => dispatch(actions.setAuthRedirectPath('/')),\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Checkout);","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [\"InputElement\"];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(\"Invalid\")\r\n    }\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')}\r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n            <select className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')} \r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>;\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Input\">\r\n            <label>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )};\r\n\r\n\r\nexport default input;"],"sourceRoot":""}